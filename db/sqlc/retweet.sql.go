// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: retweet.sql

package db

import (
	"context"
)

const createRetweet = `-- name: CreateRetweet :one
INSERT INTO retweets (
    user_id, tweet_id
) VALUES (
    $1, $2
) RETURNING user_id, tweet_id, created_at
`

type CreateRetweetParams struct {
	UserID  int64 `json:"user_id"`
	TweetID int64 `json:"tweet_id"`
}

func (q *Queries) CreateRetweet(ctx context.Context, arg CreateRetweetParams) (Retweet, error) {
	row := q.db.QueryRow(ctx, createRetweet, arg.UserID, arg.TweetID)
	var i Retweet
	err := row.Scan(&i.UserID, &i.TweetID, &i.CreatedAt)
	return i, err
}

const deleteRetweet = `-- name: DeleteRetweet :exec
DELETE FROM retweets WHERE user_id = $1 AND tweet_id = $2
`

type DeleteRetweetParams struct {
	UserID  int64 `json:"user_id"`
	TweetID int64 `json:"tweet_id"`
}

func (q *Queries) DeleteRetweet(ctx context.Context, arg DeleteRetweetParams) error {
	_, err := q.db.Exec(ctx, deleteRetweet, arg.UserID, arg.TweetID)
	return err
}

const getRetweetsByTweetID = `-- name: GetRetweetsByTweetID :many
SELECT user_id, tweet_id, created_at FROM retweets WHERE tweet_id = $1 ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type GetRetweetsByTweetIDParams struct {
	TweetID int64 `json:"tweet_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) GetRetweetsByTweetID(ctx context.Context, arg GetRetweetsByTweetIDParams) ([]Retweet, error) {
	rows, err := q.db.Query(ctx, getRetweetsByTweetID, arg.TweetID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Retweet
	for rows.Next() {
		var i Retweet
		if err := rows.Scan(&i.UserID, &i.TweetID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRetweetsByUserID = `-- name: GetRetweetsByUserID :many
SELECT user_id, tweet_id, created_at FROM retweets WHERE user_id = $1 ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type GetRetweetsByUserIDParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetRetweetsByUserID(ctx context.Context, arg GetRetweetsByUserIDParams) ([]Retweet, error) {
	rows, err := q.db.Query(ctx, getRetweetsByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Retweet
	for rows.Next() {
		var i Retweet
		if err := rows.Scan(&i.UserID, &i.TweetID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
